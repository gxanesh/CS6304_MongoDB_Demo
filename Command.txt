//to enter into mongodb
mongosh

//create a database or switch to a database
use mydb
//show databases
show dbs
//see currently selected db
db
//show all the collections
show collections


*****Table emp******

//insert data in table/collection 'emp'
//insert a single row
db.emp.insert({'_id': 'e1', 'personal': {'name': 'A', 'age': 50}, 'professional': {'designation': 'Head'}})

//insert multiple row
db.emp.insert([{'_id': 'e2', 'personal': {'name': 'B', 'age': 25}}, {'_id': 'e3', 'personal': {'name': 'C', 'age': 30}, 'professional': {'designation': 'Programmer'}}, {'_id': 'e4', 'personal': {'name': 'D','age': 30}, 'professional': {'designation': 'Intern'}}])

//show all the data
db.emp.find().pretty()

//update single data
db.emp.updateOne( { 'personal.name': 'A' },{$set: {'personal.age': 55}})

//count all the data
db.emp.find().count()

//using and
db.emp.find({$and:[{'_id': 'e1'},{'personal.name': 'A'}]}).pretty()

//using or
db.emp.find({$or:[{'personal.name': 'A'},{'personal.age': 30}]}).pretty()

//using or+and
db.emp.find({$or: [{$and:[{'_id': 'e1'},{'personal.name': 'A'}]},{'personal.age': 30}]}).pretty()

//using $in
db.emp.find({'personal.name': {$in: ['A','B']}}).pretty()

//see specific columns
db.emp.find({$or:[{'personal.name': 'A'},{'personal.age': 30}]}, {'personal.name':1, 'professional.designation': 1}).pretty()

//show by removing the id
db.emp.find({$or:[{'personal.name': 'A'},{'personal.age': 30}]}, {'personal.name':1, 'professional.designation': 1, '_id': 0}).pretty()


//delete data
db.emp.remove({'professional.designation': 'CEO'})

//drop table/collection
db.emp.drop()

//drop databases
db.dropDatabase()




***** Table Twitter *****

//to exit from mongodb
exit


//import json file (don't forget to exit mongodb)
mongoimport --db mydb --collection Twitter --type json --file '/home/mrpk9/Downloads/tweets.txt' 

//just an example how to insert csv file
mongoimport --db mydb --collection csvtwitter --type csv --headerline --file '/home/cloudera/git/HBase_Demo/Twitter.csv'


//Enter into mongodb
mongosh

//switch to mydb database
use mydb

//find tweets with specific word or pattern
db.Twitter.find({'text':{$regex:'can'}},{'text':1,'_id':0})

//sort by user name alphabatically
db.Twitter.find({},{'user.name':1,'_id':0}).sort({'user.name':1})

//limit how many data to see
db.Twitter.find({},{'user.name':1,'_id':0}).sort({'user.name':1}).limit(4)

//see users with more than 2000 friends// for equality, just key:val,//lt,ne,lte
db.Twitter.find({'user.friends_count':{$gte:2000}},{'user.name':1,'user.friends_count':1,'_id':0})

//how many tweets by same language
db.Twitter.aggregate([{$group: {'_id':'$lang','CountLang':{$sum:1}}}])

//average number of friends count with different language
db.Twitter.aggregate([{$group: {'_id':'$lang','AvgFol':{$avg:'$user.friends_count'}}}])

//total number of same hashtags in tweets
db.Twitter.aggregate([{$unwind:'$entities.hashtags'},{$group:{'_id':'$entities.hashtags.text','hashCount':{$sum:1}}}])

//sort and limit the previous query
db.Twitter.aggregate([{$unwind:'$entities.hashtags'},{$group:{'_id':'$entities.hashtags.text','hashCount':{$sum:1}}},{$limit:3},{$sort:{'hashCount':1}}])
//alter the limit and sort postion and make it descending
db.Twitter.aggregate([{$unwind:'$entities.hashtags'},{$group:{'_id':'$entities.hashtags.text','hashCount':{$sum:1}}},{$sort:{'hashCount':-1}},{$limit:3}])
